-- MySQL Script generated by MySQL Workbench
-- ven 7 gen 2022, 11:46:52
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema dovado
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `dovado` ;

-- -----------------------------------------------------
-- Schema dovado
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `dovado` ;
USE `dovado` ;

-- -----------------------------------------------------
-- Table `dovado`.`Luogo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `dovado`.`Luogo` ;

CREATE TABLE IF NOT EXISTS `dovado`.`Luogo` (
  `idLuogo` INT(11) NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(45) NOT NULL,
  `indirizzo` VARCHAR(45) NOT NULL,
  `citta` VARCHAR(45) NOT NULL,
  `regione` VARCHAR(45) NOT NULL,
  `civico` VARCHAR(45) NOT NULL,
  `cap` VARCHAR(45) NOT NULL,
  `latitudine` FLOAT NULL DEFAULT NULL,
  `longitudine` DOUBLE NULL DEFAULT NULL,
  PRIMARY KEY (`idLuogo`))
ENGINE = InnoDB
AUTO_INCREMENT = 9
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_unicode_ci;


-- -----------------------------------------------------
-- Table `dovado`.`Utente`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `dovado`.`Utente` ;

CREATE TABLE IF NOT EXISTS `dovado`.`Utente` (
  `idUtente` INT(11) NOT NULL AUTO_INCREMENT,
  `username` VARCHAR(20) NOT NULL,
  `email` VARCHAR(45) NOT NULL,
  `password` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idUtente`),
  UNIQUE INDEX `username_UNIQUE` (`username` ASC) VISIBLE,
  UNIQUE INDEX `email_UNIQUE` (`email` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 18
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_unicode_ci;


-- -----------------------------------------------------
-- Table `dovado`.`Partner`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `dovado`.`Partner` ;

CREATE TABLE IF NOT EXISTS `dovado`.`Partner` (
  `idPartner` INT(11) NOT NULL AUTO_INCREMENT,
  `partita_iva` VARCHAR(11) NOT NULL,
  `nome_azienda` VARCHAR(80) NOT NULL,
  PRIMARY KEY (`idPartner`),
  CONSTRAINT `sottocategorizzazionePartner`
    FOREIGN KEY (`idPartner`)
    REFERENCES `dovado`.`Utente` (`idUtente`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 17
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_unicode_ci;


-- -----------------------------------------------------
-- Table `dovado`.`Attivita`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `dovado`.`Attivita` ;

CREATE TABLE IF NOT EXISTS `dovado`.`Attivita` (
  `idAttivita` INT(11) NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(45) NOT NULL,
  `descrizione` VARCHAR(400) NULL DEFAULT NULL,
  `sito` VARCHAR(45) NULL DEFAULT NULL,
  `prezzo` VARCHAR(45) NULL DEFAULT NULL,
  `luogo` INT(11) NOT NULL,
  `proprietario` INT(11) NULL DEFAULT NULL,
  PRIMARY KEY (`idAttivita`),
  INDEX `ospitazione_idx` (`luogo` ASC) VISIBLE,
  INDEX `possesso_idx` (`proprietario` ASC) VISIBLE,
  CONSTRAINT `ospitazione`
    FOREIGN KEY (`luogo`)
    REFERENCES `dovado`.`Luogo` (`idLuogo`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `possesso`
    FOREIGN KEY (`proprietario`)
    REFERENCES `dovado`.`Partner` (`idPartner`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 7
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_unicode_ci;


-- -----------------------------------------------------
-- Table `dovado`.`Cadenza`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `dovado`.`Cadenza` ;

CREATE TABLE IF NOT EXISTS `dovado`.`Cadenza` (
  `idCadenza` INT(11) NOT NULL,
  `tipo` ENUM('CONTINUA', 'PERIODICA', 'SCADENZA') NOT NULL,
  `orario_apertura` VARCHAR(5) NULL DEFAULT NULL,
  `orario_chiusura` VARCHAR(5) NULL DEFAULT NULL,
  `data_inizio` VARCHAR(11) NULL DEFAULT NULL,
  `data_fine` VARCHAR(11) NULL DEFAULT NULL,
  `cadenza` ENUM('WEEKLY', 'MONTHLY', 'ANNUALLY') NULL DEFAULT NULL,
  PRIMARY KEY (`idCadenza`),
  CONSTRAINT `fk_Cadenza_1`
    FOREIGN KEY (`idCadenza`)
    REFERENCES `dovado`.`Attivita` (`idAttivita`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_unicode_ci;


-- -----------------------------------------------------
-- Table `dovado`.`Categorie_interessate`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `dovado`.`Categorie_interessate` ;

CREATE TABLE IF NOT EXISTS `dovado`.`Categorie_interessate` (
  `idPreferenza` INT(11) NOT NULL,
  `Arte` TINYINT(4) NOT NULL DEFAULT 0,
  `Cibo` TINYINT(4) NOT NULL DEFAULT 0,
  `Musica` TINYINT(4) NOT NULL DEFAULT 0,
  `Sport` TINYINT(4) NOT NULL DEFAULT 0,
  `Social` TINYINT(4) NOT NULL DEFAULT 0,
  `Natura` TINYINT(4) NOT NULL DEFAULT 0,
  `Esplorazione` TINYINT(4) NOT NULL DEFAULT 0,
  `Ricorrenze_locali` TINYINT(4) NOT NULL DEFAULT 0,
  `Moda` TINYINT(4) NOT NULL DEFAULT 0,
  `Shopping` TINYINT(4) NOT NULL DEFAULT 0,
  `Adrenalina` TINYINT(4) NOT NULL DEFAULT 0,
  `Relax` TINYINT(4) NOT NULL DEFAULT 0,
  `Istruzione` TINYINT(4) NOT NULL DEFAULT 0,
  `Monumenti` TINYINT(4) NOT NULL,
  PRIMARY KEY (`idPreferenza`),
  CONSTRAINT `attivitaRiferimento`
    FOREIGN KEY (`idPreferenza`)
    REFERENCES `dovado`.`Attivita` (`idAttivita`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_unicode_ci;


-- -----------------------------------------------------
-- Table `dovado`.`Esploratore`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `dovado`.`Esploratore` ;

CREATE TABLE IF NOT EXISTS `dovado`.`Esploratore` (
  `idEsploratore` INT(11) NOT NULL,
  `wallet` INT(11) NOT NULL DEFAULT 0,
  PRIMARY KEY (`idEsploratore`),
  CONSTRAINT `sottocategorizzazione`
    FOREIGN KEY (`idEsploratore`)
    REFERENCES `dovado`.`Utente` (`idUtente`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_unicode_ci;


-- -----------------------------------------------------
-- Table `dovado`.`Messaggio`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `dovado`.`Messaggio` ;

CREATE TABLE IF NOT EXISTS `dovado`.`Messaggio` (
  `idmsg` INT(11) NOT NULL AUTO_INCREMENT,
  `idchannel` INT(11) NOT NULL,
  `data_invio` VARCHAR(45) NOT NULL,
  `contenuto` VARCHAR(100) NOT NULL,
  `sender` INT(11) NOT NULL,
  PRIMARY KEY (`idmsg`),
  INDEX `appartenenza_idx` (`idchannel` ASC) VISIBLE,
  INDEX `invio_idx` (`sender` ASC) VISIBLE,
  CONSTRAINT `appartenenza`
    FOREIGN KEY (`idchannel`)
    REFERENCES `dovado`.`Attivita` (`idAttivita`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `invio`
    FOREIGN KEY (`sender`)
    REFERENCES `dovado`.`Utente` (`idUtente`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_unicode_ci;


-- -----------------------------------------------------
-- Table `dovado`.`Preferenza`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `dovado`.`Preferenza` ;

CREATE TABLE IF NOT EXISTS `dovado`.`Preferenza` (
  `idPreferenza` INT(11) NOT NULL,
  `Arte` TINYINT(4) NOT NULL DEFAULT 0,
  `Cibo` TINYINT(4) NOT NULL DEFAULT 0,
  `Musica` TINYINT(4) NOT NULL DEFAULT 0,
  `Sport` TINYINT(4) NOT NULL DEFAULT 0,
  `Social` TINYINT(4) NOT NULL DEFAULT 0,
  `Natura` TINYINT(4) NOT NULL DEFAULT 0,
  `Esplorazione` TINYINT(4) NOT NULL DEFAULT 0,
  `Ricorrenze_locali` TINYINT(4) NOT NULL DEFAULT 0,
  `Moda` TINYINT(4) NOT NULL DEFAULT 0,
  `Shopping` TINYINT(4) NOT NULL DEFAULT 0,
  `Adrenalina` TINYINT(4) NOT NULL DEFAULT 0,
  `Relax` TINYINT(4) NOT NULL DEFAULT 0,
  `Istruzione` TINYINT(4) NOT NULL DEFAULT 0,
  `Monumenti` TINYINT(4) NOT NULL,
  PRIMARY KEY (`idPreferenza`),
  CONSTRAINT `fk_Preferenza_1`
    FOREIGN KEY (`idPreferenza`)
    REFERENCES `dovado`.`Esploratore` (`idEsploratore`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_unicode_ci;


-- -----------------------------------------------------
-- Table `dovado`.`Recensione`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `dovado`.`Recensione` ;

CREATE TABLE IF NOT EXISTS `dovado`.`Recensione` (
  `idRecensione` INT(11) NOT NULL AUTO_INCREMENT,
  `punteggio` INT(11) NOT NULL,
  `commento` VARCHAR(200) NOT NULL,
  `recensore` VARCHAR(20) NOT NULL,
  `attivita` INT(11) NOT NULL,
  PRIMARY KEY (`idRecensione`),
  INDEX `apparetenza_idx` (`attivita` ASC) VISIBLE,
  CONSTRAINT `apparetenza`
    FOREIGN KEY (`attivita`)
    REFERENCES `dovado`.`Attivita` (`idAttivita`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_unicode_ci;

USE `dovado` ;

-- -----------------------------------------------------
-- Placeholder table for view `dovado`.`dati_esploratore`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `dovado`.`dati_esploratore` (`idUtente` INT, `username` INT, `email` INT, `password` INT, `idEsploratore` INT, `wallet` INT, `idPreferenza` INT, `Arte` INT, `Cibo` INT, `Musica` INT, `Sport` INT, `Social` INT, `Natura` INT, `Esplorazione` INT, `Ricorrenze_locali` INT, `Moda` INT, `Shopping` INT, `Adrenalina` INT, `Relax` INT, `Istruzione` INT, `Monumenti` INT);

-- -----------------------------------------------------
-- Placeholder table for view `dovado`.`full_info_activity`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `dovado`.`full_info_activity` (`id` INT, `nome` INT, `descrizione` INT, `sito` INT, `prezzo` INT, `proprietario` INT, `luogo` INT, `tipo` INT, `orario_apertura` INT, `orario_chiusura` INT, `data_inizio` INT, `data_fine` INT, `cadenza` INT, `arte` INT, `cibo` INT, `musica` INT, `sport` INT, `social` INT, `natura` INT, `esplorazione` INT, `ricorrenze` INT, `moda` INT, `shopping` INT, `adrenalina` INT, `relax` INT, `istruzione` INT, `monumenti` INT);

-- -----------------------------------------------------
-- procedure create_activity
-- -----------------------------------------------------

USE `dovado`;
DROP procedure IF EXISTS `dovado`.`create_activity`;

DELIMITER $$
USE `dovado`$$
CREATE DEFINER=`sav`@`localhost` PROCEDURE `create_activity`(
	in nome varchar(45),
    in descrizione varchar(400),
    in sito varchar(45),
    in prezzo varchar(4),
    in luogo int,
    in proprietario int,
    in Arte boolean,
	in Cibo boolean,
	in Musica boolean,
	in Sport boolean,
	in Social boolean,
	in Natura boolean,
	in Esplorazione boolean,
	in Ricorrenze_locali boolean,
	in Moda boolean,
	in Shopping boolean,
	in Adrenalina boolean,
	in Monumenti boolean,
	in Relax boolean,
	in Istruzione boolean,
    in tipo ENUM('CONTINUA','PERIODICA','SCADENZA'),
    in or_apertura varchar(5),
    in or_chiusura varchar(5),
    in data_inizio varchar(11),
    in data_fine varchar(11),
    in cadenza ENUM('WEEKLY','MONTHLY','ANNUALLY')
)
BEGIN
	
	insert into Attivita (nome,descrizione,sito,prezzo,luogo,proprietario) values(nome,descrizione,sito,prezzo,luogo,proprietario);
	
    insert into Categorie_interessate (idPreferenza,Arte,Cibo,Musica,Sport,Social,Natura,Esplorazione,Ricorrenze_locali,Moda,Shopping,Adrenalina,Monumenti,Relax,Istruzione)
	values(last_insert_id(),Arte,Cibo,Musica,Sport,Social,Natura,Esplorazione,Ricorrenze_locali,Moda,Shopping,Adrenalina,Monumenti,Relax,Istruzione);
	
    insert into Cadenza values(last_insert_id(),tipo,or_apertura,or_chiusura,data_inizio,data_fine,cadenza);
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure create_explorer
-- -----------------------------------------------------

USE `dovado`;
DROP procedure IF EXISTS `dovado`.`create_explorer`;

DELIMITER $$
USE `dovado`$$
CREATE DEFINER=`sav`@`localhost` PROCEDURE `create_explorer`(in usr varchar(20), 
in email varchar(45),
in pass varchar(45),
in Arte boolean,
in Cibo boolean,
in Musica boolean,
in Sport boolean,
in Social boolean,
in Natura boolean,
in Esplorazione boolean,
in Ricorrenze_locali boolean,
in Moda boolean,
in Shopping boolean,
in Adrenalina boolean,
in Monumenti boolean,
in Relax boolean,
in Istruzione boolean)
BEGIN
	declare id int;
	insert into Utente (username,email,password) values(usr,email,pass);
    
    select idUtente from Utente where username = usr into id;
    
    insert into Esploratore (idEsploratore, wallet) values(id,0);
    
    insert into Preferenza (idPreferenza,Arte,Cibo,Musica,Sport,Social,Natura,Esplorazione,Ricorrenze_locali,Moda,Shopping,Adrenalina,Monumenti,Relax,Istruzione)
	values(id,Arte,Cibo,Musica,Sport,Social,Natura,Esplorazione,Ricorrenze_locali,Moda,Shopping,Adrenalina,Monumenti,Relax,Istruzione);
	
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure create_partner
-- -----------------------------------------------------

USE `dovado`;
DROP procedure IF EXISTS `dovado`.`create_partner`;

DELIMITER $$
USE `dovado`$$
CREATE DEFINER=`sav`@`localhost` PROCEDURE `create_partner`(
	in usr varchar(20), 
	in email varchar(45),
	in pass varchar(45),
	in partita_iva varchar(11),
    in nome_azienda varchar(80)
)
BEGIN
	declare id int;
	insert into Utente (username,email,password) values(usr,email,pass);
    
    select idUtente from Utente where username = usr into id;
    
    insert into Partner(idPartner,partita_iva,nome_azienda) values(id,partita_iva,nome_azienda);

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure create_place
-- -----------------------------------------------------

USE `dovado`;
DROP procedure IF EXISTS `dovado`.`create_place`;

DELIMITER $$
USE `dovado`$$
CREATE DEFINER=`sav`@`localhost` PROCEDURE `create_place`(
	in nome varchar(45),
    in indirizzo varchar(45),
    in citta varchar(45),
    in regione varchar(45),
    in civico varchar(45),
    in cap varchar(45)
)
BEGIN
	-- il controllo che il luogo esista qui viene fatto sul dao!
    -- il controllo che il luogo non sia dublicato invece viene fatto sul trigger before insert!
    insert into Luogo(nome,indirizzo,citta,regione,civico,cap) values (nome,indirizzo,citta,regione,civico,cap);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure get_activity
-- -----------------------------------------------------

USE `dovado`;
DROP procedure IF EXISTS `dovado`.`get_activity`;

DELIMITER $$
USE `dovado`$$
CREATE DEFINER=`sav`@`localhost` PROCEDURE `get_activity`(in max_distance float, in my_lat float, in my_long float)
BEGIN
    -- nel calcolo che segue uso:
    -- una sorta di formula inversa di Haversine per trovare la distanza su una sfera 
    -- la moltiplicazione per 6378.137 serve per dare alla sfera le dimensioni della terra
    -- max_distance è in km ma forse conviene usare i metri?
	declare max_km real;
    
    drop temporary table if exists luoghi_vicini;
    create temporary table luoghi_vicini(idLuogo int, nome varchar(100));
    
    set max_km = (max_distance/1000);
	
    -- qua tengo nome per debugging, devo ricordarmi di toglierlo 
    insert into luoghi_vicini select idLuogo,nome from Luogo where (6378.137*acos(sin(latitudine*PI()/180)*sin(my_lat*PI()/180)+cos(latitudine*PI()/180)*cos(my_lat*PI()/180)*cos((longitudine-my_long)*PI()/180))) <= max_distance;

	select * from full_info_activity join luoghi_vicini on full_info_activity.Luogo = luoghi_vicini.idLuogo;
    
    drop temporary table luoghi_vicini;
	
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure get_nearby_activities
-- -----------------------------------------------------

USE `dovado`;
DROP procedure IF EXISTS `dovado`.`get_nearby_activities`;

DELIMITER $$
USE `dovado`$$
CREATE DEFINER=`sav`@`localhost` PROCEDURE `get_nearby_activities`(in max_distance float, in my_lat float, in my_long float)
BEGIN
    -- nel calcolo che segue uso:
    -- una sorta di formula inversa di Haversine per trovare la distanza su una sfera 
    -- la moltiplicazione per 6378.137 serve per dare alla sfera le dimensioni della terra
    -- max_distance è in km ma forse conviene usare i metri?
	declare max_km real;
    
    drop temporary table if exists luoghi_vicini;
    create temporary table luoghi_vicini(idLuogo int, nome varchar(100), distanza float);
    
    set max_km = (max_distance/1000);
	
    -- qua tengo nome per debugging, devo ricordarmi di toglierlo 
    insert into luoghi_vicini select idLuogo,nome,(6378.137*acos(sin(latitudine*PI()/180)*sin(my_lat*PI()/180)+cos(latitudine*PI()/180)*cos(my_lat*PI()/180)*cos((longitudine-my_long)*PI()/180))) as distance from Luogo where (6378.137*acos(sin(latitudine*PI()/180)*sin(my_lat*PI()/180)+cos(latitudine*PI()/180)*cos(my_lat*PI()/180)*cos((longitudine-my_long)*PI()/180))) <= max_distance;

	select * from full_info_activity join luoghi_vicini on full_info_activity.Luogo = luoghi_vicini.idLuogo;
    
    drop temporary table luoghi_vicini;
	
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure get_partner_info
-- -----------------------------------------------------

USE `dovado`;
DROP procedure IF EXISTS `dovado`.`get_partner_info`;

DELIMITER $$
USE `dovado`$$
CREATE DEFINER=`sav`@`localhost` PROCEDURE `get_partner_info`(in id int)
BEGIN
	select * from Partner where idPartner = id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure login_explorer
-- -----------------------------------------------------

USE `dovado`;
DROP procedure IF EXISTS `dovado`.`login_explorer`;

DELIMITER $$
USE `dovado`$$
CREATE DEFINER=`sav`@`localhost` PROCEDURE `login_explorer`(in email varchar(45),
in pass varchar(45))
BEGIN
	select idUtente as id, username,email, wallet,Arte,Cibo,Musica,Sport,Social,Natura,Esplorazione,Ricorrenze_locali,Moda,Shopping,Adrenalina,Monumenti,Relax,Istruzione  from dati_esploratore where (dati_esploratore.email = email and dati_esploratore.password = pass);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure search_place_by_id
-- -----------------------------------------------------

USE `dovado`;
DROP procedure IF EXISTS `dovado`.`search_place_by_id`;

DELIMITER $$
USE `dovado`$$
CREATE DEFINER=`sav`@`localhost` PROCEDURE `search_place_by_id`(in id int)
BEGIN
	select * from Luogo where idLuogo = id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure search_places
-- -----------------------------------------------------

USE `dovado`;
DROP procedure IF EXISTS `dovado`.`search_places`;

DELIMITER $$
USE `dovado`$$
CREATE DEFINER=`sav`@`localhost` PROCEDURE `search_places`(in search varchar(45))
BEGIN
	select * from Luogo where (nome like concat('%',search,'%'))
    or(indirizzo like concat('%',search,'%'))
    or(citta like concat('%',search,'%'))
    or(regione like concat('%',search,'%'))
    or(indirizzo like concat('%',search,'%'))
    or(cap like concat('%',search,'%'));
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `dovado`.`dati_esploratore`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `dovado`.`dati_esploratore`;
DROP VIEW IF EXISTS `dovado`.`dati_esploratore` ;
USE `dovado`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`sav`@`localhost` SQL SECURITY DEFINER VIEW `dovado`.`dati_esploratore` AS select `dovado`.`Utente`.`idUtente` AS `idUtente`,`dovado`.`Utente`.`username` AS `username`,`dovado`.`Utente`.`email` AS `email`,`dovado`.`Utente`.`password` AS `password`,`dovado`.`Esploratore`.`idEsploratore` AS `idEsploratore`,`dovado`.`Esploratore`.`wallet` AS `wallet`,`dovado`.`Preferenza`.`idPreferenza` AS `idPreferenza`,`dovado`.`Preferenza`.`Arte` AS `Arte`,`dovado`.`Preferenza`.`Cibo` AS `Cibo`,`dovado`.`Preferenza`.`Musica` AS `Musica`,`dovado`.`Preferenza`.`Sport` AS `Sport`,`dovado`.`Preferenza`.`Social` AS `Social`,`dovado`.`Preferenza`.`Natura` AS `Natura`,`dovado`.`Preferenza`.`Esplorazione` AS `Esplorazione`,`dovado`.`Preferenza`.`Ricorrenze_locali` AS `Ricorrenze_locali`,`dovado`.`Preferenza`.`Moda` AS `Moda`,`dovado`.`Preferenza`.`Shopping` AS `Shopping`,`dovado`.`Preferenza`.`Adrenalina` AS `Adrenalina`,`dovado`.`Preferenza`.`Relax` AS `Relax`,`dovado`.`Preferenza`.`Istruzione` AS `Istruzione`,`dovado`.`Preferenza`.`Monumenti` AS `Monumenti` from ((`dovado`.`Utente` join `dovado`.`Esploratore` on(`dovado`.`Utente`.`idUtente` = `dovado`.`Esploratore`.`idEsploratore`)) join `dovado`.`Preferenza` on(`dovado`.`Utente`.`idUtente` = `dovado`.`Preferenza`.`idPreferenza`));

-- -----------------------------------------------------
-- View `dovado`.`full_info_activity`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `dovado`.`full_info_activity`;
DROP VIEW IF EXISTS `dovado`.`full_info_activity` ;
USE `dovado`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`sav`@`localhost` SQL SECURITY DEFINER VIEW `dovado`.`full_info_activity` AS select `dovado`.`Attivita`.`idAttivita` AS `id`,`dovado`.`Attivita`.`nome` AS `nome`,`dovado`.`Attivita`.`descrizione` AS `descrizione`,`dovado`.`Attivita`.`sito` AS `sito`,`dovado`.`Attivita`.`prezzo` AS `prezzo`,`dovado`.`Attivita`.`proprietario` AS `proprietario`,`dovado`.`Attivita`.`luogo` AS `luogo`,`dovado`.`Cadenza`.`tipo` AS `tipo`,`dovado`.`Cadenza`.`orario_apertura` AS `orario_apertura`,`dovado`.`Cadenza`.`orario_chiusura` AS `orario_chiusura`,`dovado`.`Cadenza`.`data_inizio` AS `data_inizio`,`dovado`.`Cadenza`.`data_fine` AS `data_fine`,`dovado`.`Cadenza`.`cadenza` AS `cadenza`,`dovado`.`Categorie_interessate`.`Arte` AS `arte`,`dovado`.`Categorie_interessate`.`Cibo` AS `cibo`,`dovado`.`Categorie_interessate`.`Musica` AS `musica`,`dovado`.`Categorie_interessate`.`Sport` AS `sport`,`dovado`.`Categorie_interessate`.`Social` AS `social`,`dovado`.`Categorie_interessate`.`Natura` AS `natura`,`dovado`.`Categorie_interessate`.`Esplorazione` AS `esplorazione`,`dovado`.`Categorie_interessate`.`Ricorrenze_locali` AS `ricorrenze`,`dovado`.`Categorie_interessate`.`Moda` AS `moda`,`dovado`.`Categorie_interessate`.`Shopping` AS `shopping`,`dovado`.`Categorie_interessate`.`Adrenalina` AS `adrenalina`,`dovado`.`Categorie_interessate`.`Relax` AS `relax`,`dovado`.`Categorie_interessate`.`Istruzione` AS `istruzione`,`dovado`.`Categorie_interessate`.`Monumenti` AS `monumenti` from ((`dovado`.`Attivita` join `dovado`.`Cadenza` on(`dovado`.`Attivita`.`idAttivita` = `dovado`.`Cadenza`.`idCadenza`)) join `dovado`.`Categorie_interessate` on(`dovado`.`Attivita`.`idAttivita` = `dovado`.`Categorie_interessate`.`idPreferenza`));
USE `dovado`;

DELIMITER $$

USE `dovado`$$
DROP TRIGGER IF EXISTS `dovado`.`Luogo_BEFORE_INSERT` $$
USE `dovado`$$
CREATE
DEFINER=`sav`@`localhost`
TRIGGER `dovado`.`Luogo_BEFORE_INSERT`
BEFORE INSERT ON `dovado`.`Luogo`
FOR EACH ROW
BEGIN
	declare id int;
    
    select idLuogo from Luogo where ((Luogo.indirizzo= NEW.indirizzo) and (Luogo.citta=NEW.citta) and (Luogo.regione=NEW.regione) and (Luogo.civico=NEW.civico) and (Luogo.cap=NEW.cap)) into id;
    
    if(id is not null) then
		signal sqlstate '45000'SET MESSAGE_TEXT = 'posto già creato in precedenza';
	end if;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
